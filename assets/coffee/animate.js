// Generated by CoffeeScript 1.6.2
(function() {
  var animate;

  animate = (function() {
    var config, paper;

    paper = null;

    config = {
      fontSize: 30,
      fontFamily: "Arial, Helvetica, sans-serif",
      canvasWidth: 800,
      canvasHeight: 600,
      inputLetterX: 770,
      inputLetterY: 160,
      rectangleRightX: 580,
      rectangleRightY: 50,
      rectangleWidth: 100,
      rectangleHeight: 200,
      rectangleBorder: 20,
      rotorTextInitialX: 630,
      rotorStep: 180,
      rotorNameY: 80,
      rotorTransformationY: 160,
      reflectorRectangleX: 30,
      reflectorRectangleY: 100,
      reflectorWidth: 100,
      reflectorHeight: 400,
      reflectorTextInitialX: 80,
      reflectorNameY: 130,
      reflectorTransformationX: 80,
      reflectorTransformationY: 250,
      arrowForwardInputX: 750,
      arrowForwardRotorX: 570,
      arrowForwardY: 150,
      arrowBackwardX: 750,
      arrowBackwardY: 450,
      arrowStep: 190,
      arrowLenght: 30
    };

    function animate(element) {
      paper = Raphael(document.getElementById(element), config.canvasWidth, config.canvasHeight);
      this.updateConfig = function() {
        config.rectangleRightY = 350;
        config.rotorNameY = 380;
        config.rotorTransformationY = 460;
        return config.inputLetterY = 460;
      };
      this.resetConfig = function() {
        config.rectangleRightY = 150;
        config.rotorNameY = 200;
        config.rotorTransformationY = 320;
        return config.inputLetterY = 320;
      };
      this.writeChar = function(x, y, char) {
        char = paper.text(x, y, char);
        char.attr({
          "font-size": config.fontSize,
          "font-family": config.fontFamily
        });
        return this.animateElement(char);
      };
      this.drawRect = function(x, y, width, height, r) {
        var rect;

        rect = paper.rect(x, y, width, height, r);
        rect.attr("fill", "#DDD");
        return this.animateElement(rect);
      };
      this.drawInputChar = function(char) {
        var p;

        p = this.writeChar(config.inputLetterX, config.inputLetterY, char);
        return this.animateElement(p);
      };
      this.drawRotor = function(rotor, rotorPosition, offset, backward) {
        this.drawRect(config.rectangleRightX - offset, config.rectangleRightY, config.rectangleWidth, config.rectangleHeight, config.rectangleBorder);
        this.writeChar(config.rotorTextInitialX - offset, config.rotorNameY, rotor);
        return this.writeChar(config.rotorTextInitialX - offset, config.rotorNameY - 50, rotorPosition);
      };
      this.drawRotorTransformation = function(text, offset) {
        return this.writeChar(config.rotorTextInitialX - offset, config.rotorTransformationY, text);
      };
      this.drawReflector = function(reflector) {
        this.drawRect(config.reflectorRectangleX, config.reflectorRectangleY, config.reflectorWidth, config.reflectorHeight, config.rectangleBorder);
        return this.writeChar(config.reflectorTextInitialX, config.reflectorNameY, reflector);
      };
      this.drawRightRotor = function(rotor, rotorPosition, backward) {
        return this.drawRotor(rotor, rotorPosition, config.rotorStep * 0, backward);
      };
      this.drawMiddleRotor = function(rotor, rotorPosition, backward) {
        return this.drawRotor(rotor, rotorPosition, config.rotorStep * 1, backward);
      };
      this.drawLeftRotor = function(rotor, rotorPosition, backward) {
        return this.drawRotor(rotor, rotorPosition, config.rotorStep * 2, backward);
      };
      this.drawRightRotorTransformation = function(text, offset) {
        return this.drawRotorTransformation(text, config.rotorStep * 0);
      };
      this.drawMiddleRotorTransformation = function(text, offset) {
        return this.drawRotorTransformation(text, config.rotorStep * 1);
      };
      this.drawLeftRotorTransformation = function(text, offset) {
        return this.drawRotorTransformation(text, config.rotorStep * 2);
      };
      this.drawReflectorTransformation = function(from, to) {
        this.writeChar(config.reflectorTransformationX, config.reflectorTransformationY, from);
        this.writeChar(config.reflectorTransformationX, config.reflectorTransformationY + 50, "-");
        return this.writeChar(config.reflectorTransformationX, config.reflectorTransformationY + 100, to);
      };
      this.animateElement = function(element) {};
      this.drawPaths = function() {};
      this.drawArrow = function(x, y, w) {
        var p;

        p = paper.path("M" + x + " " + y + "L" + (x - w) + " " + y);
        this.animateElement(p);
        p = paper.path("M" + (x - w) + " " + y + "L" + (x - w + 15) + " " + (y - 15));
        this.animateElement(p);
        p = paper.path("M" + (x - w - 25) + " " + (y + 6) + "L" + (x - w + 15) + " " + (y - 15));
        this.animateElement(p);
        p = paper.path("M" + (x - w - 25) + " " + (y + 6) + "L" + (x - w + 15) + " " + (y + 25));
        this.animateElement(p);
        p = paper.path("M" + (x - w) + " " + (y + 10) + "L" + (x - w + 15) + " " + (y + 25));
        this.animateElement(p);
        p = paper.path("M" + x + " " + (y + 10) + "L" + (x - w) + " " + (y + 10));
        this.animateElement(p);
        p = paper.path("M" + x + " " + y + "L" + x + " " + (y + 10));
        return this.animateElement(p);
      };
      this.drawBackwardArrow = function(x, y, w) {
        var p;

        p = paper.path("M" + (x - w) + " " + y + "L" + x + " " + y);
        this.animateElement(p);
        p = paper.path("M" + x + " " + y + "L" + (x - 15) + " " + (y - 15));
        this.animateElement(p);
        p = paper.path("M" + (x - 15) + " " + (y - 15) + "L" + (x + 25) + " " + (y + 6));
        this.animateElement(p);
        p = paper.path("M" + (x + 25) + " " + (y + 6) + "L" + (x - 15) + " " + (y + 25));
        this.animateElement(p);
        p = paper.path("M" + (x - 15) + " " + (y + 25) + "L" + x + " " + (y + 10));
        this.animateElement(p);
        p = paper.path("M" + x + " " + (y + 10) + "L" + (x - w) + " " + (y + 10));
        this.animateElement(p);
        p = paper.path("M" + (x - w) + " " + y + "L" + (x - w) + " " + (y + 10));
        return this.animateElement(p);
      };
      this.play = function(path, deck) {
        this.drawInputChar(path.input);
        this.drawArrow(config.arrowForwardInputX, config.arrowForwardY, config.arrowLenght);
        this.drawRightRotor(deck.rightRotor, deck.rightRotorPosition);
        this.drawRightRotorTransformation(path.rightRotorForward);
        this.drawArrow(config.arrowForwardRotorX, config.arrowForwardY, config.arrowLenght);
        this.drawMiddleRotor(deck.middleRotor, deck.middleRotorPosition);
        this.drawMiddleRotorTransformation(path.middleRotorForward);
        this.drawArrow(config.arrowForwardRotorX - config.arrowStep + 10, config.arrowForwardY, config.arrowLenght);
        this.drawLeftRotor(deck.leftRotor, deck.leftRotorPosition);
        this.drawLeftRotorTransformation(path.leftRotorForward);
        this.drawArrow(config.arrowForwardRotorX - config.arrowStep * 2 + 20, config.arrowForwardY, config.arrowLenght);
        this.drawReflector(deck.reflector);
        this.drawReflectorTransformation(path.reflectorFrom, path.reflectorTo);
        this.drawBackwardArrow(config.arrowForwardRotorX - config.arrowStep * 2, config.arrowBackwardY, config.arrowLenght);
        this.updateConfig();
        this.drawLeftRotor(deck.leftRotor, "", false);
        this.drawLeftRotorTransformation(path.leftRotorBackward);
        this.drawBackwardArrow(config.arrowForwardRotorX - config.arrowStep - 20, config.arrowBackwardY, config.arrowLenght);
        this.drawMiddleRotor(deck.middleRotor, "", false);
        this.drawMiddleRotorTransformation(path.middleRotorBackward);
        this.drawBackwardArrow(config.arrowForwardRotorX - 20, config.arrowBackwardY, config.arrowLenght);
        this.drawRightRotor(deck.rightRotor, "", false);
        this.drawRightRotorTransformation(path.rightRotorBackward);
        this.drawBackwardArrow(config.arrowForwardInputX - 20, config.arrowBackwardY, config.arrowLenght);
        this.drawInputChar(path.output);
        return this.resetConfig();
      };
    }

    return animate;

  })();

  this.animate = animate;

}).call(this);
