// Generated by CoffeeScript 1.6.2
(function() {
  var $, Keyboard;

  $ = jQuery;

  Keyboard = (function() {
    function Keyboard(uiElement) {
      var currentLetter, events, keyElements, onKeyDown, onKeyUp, raiseEvent;

      currentLetter = null;
      keyElements = {};
      events = {};
      $(uiElement).find(".key").each(function() {
        var el;

        el = $(this);
        keyElements[el.data("key")] = el;
      });
      $(document).on('keydown', function(e) {
        if (e.keyCode >= 65 && e.keyCode <= 90) {
          document.getElementById('keystroke_sound').play();
          onKeyDown(String.fromCharCode(e.keyCode));
        }
      });
      $(document).on('keyup', function(e) {
        if (e.keyCode >= 65 && e.keyCode <= 90) {
          document.getElementById('keystroke_sound').pause();
          document.getElementById('keystroke_sound').currentTime = 0;
          onKeyUp(String.fromCharCode(e.keyCode));
        }
      });
      $(uiElement).on('mousedown', '.key', function() {
        document.getElementById('keystroke_sound').play();
        onKeyDown($(this).data("key"));
      });
      $(uiElement).on('mouseup', '.key', function() {
        document.getElementById('keystroke_sound').pause();
        document.getElementById('keystroke_sound').currentTime = 0;
        onKeyUp($(this).data("key"));
      });
      raiseEvent = function(event, eventData) {
        if (events.hasOwnProperty(event)) {
          events[event].forEach(function(fn) {
            if (eventData) {
              fn.call(void 0, eventData);
            } else {
              fn.call(void 0);
            }
          });
        }
      };
      this.on = function(event, callback) {
        if (typeof callback !== 'function') {
          return;
        }
        if (!events.hasOwnProperty(event)) {
          events[event] = [];
        }
        events[event].push(callback);
      };
      onKeyDown = function(char) {
        if (currentLetter) {
          return;
        }
        currentLetter = char;
        keyElements[char].addClass("pressed");
        raiseEvent('keydown', {
          key: char
        });
      };
      onKeyUp = function(char) {
        if (!currentLetter || currentLetter !== char) {
          return;
        }
        currentLetter = null;
        keyElements[char].removeClass("pressed");
        raiseEvent('keyup', {
          key: char
        });
      };
    }

    return Keyboard;

  })();

  this.Keyboard = Keyboard;

}).call(this);
