// Generated by CoffeeScript 1.6.2
(function() {
  var RotorDeck;

  RotorDeck = (function() {
    function RotorDeck(rotorsCollection, reflector, rotorLeft, rotorMiddle, rotorRight) {
      var events, raiseEvent, rotorDeck, that;

      this.rotorsCollection = rotorsCollection;
      this.reflector = reflector;
      this.rotorLeft = rotorLeft;
      this.rotorMiddle = rotorMiddle;
      this.rotorRight = rotorRight;
      events = {};
      rotorDeck = $(this);
      that = this;
      $(this.rotorsCollection).find(".rotor_button").each(function() {
        return $(this).on('click', function() {
          var affectedRotor, currentLetterItem, direction, nextItem, prevItem, rotorElement, rotorPosition, ulElement;

          rotorPosition = $(this).data('position');
          direction = $(this).data('direction');
          affectedRotor = that["rotor" + rotorPosition];
          rotorElement = $(this).closest('.rotor');
          ulElement = $(rotorElement).find('ul.rotor_letters');
          currentLetterItem = $(ulElement).find('.visible_letter');
          if (direction === 'F') {
            $(currentLetterItem).removeClass('visible_letter');
            document.getElementById('rotation_sound').play();
            nextItem = $(currentLetterItem).next('li');
            if ($(nextItem).length > 0) {
              return $(nextItem).addClass('visible_letter');
            } else {
              return $(ulElement).find('li:first-child').addClass('visible_letter');
            }
          } else if (direction === 'B') {
            $(currentLetterItem).removeClass('visible_letter');
            document.getElementById('rotation_sound').play();
            prevItem = $(currentLetterItem).prev('li');
            if ($(prevItem).length > 0) {
              return $(prevItem).addClass('visible_letter');
            } else {
              return $(ulElement).find('li:last-child').addClass('visible_letter');
            }
          }
        });
      });
      this.rotorRight.on("turnover", function() {
        return rotorMiddle.advanceForward();
      });
      this.rotorMiddle.on("turnover", function() {
        return rotorLeft.advanceForward();
      });
      raiseEvent = function(event, eventData) {
        if (events.hasOwnProperty(event)) {
          events[event].forEach(function(fn) {
            if (eventData) {
              fn.call(void 0, eventData);
            } else {
              fn.call(void 0);
            }
          });
        }
      };
      this.on = function(event, callback) {
        if (typeof callback !== 'function') {
          return;
        }
        if (!events.hasOwnProperty(event)) {
          events[event] = [];
        }
        events[event].push(callback);
      };
      this.encrypt = function(char) {
        var result;

        result = rotorRight.getForwardChar(char);
        result = rotorMiddle.getForwardChar(result);
        result = rotorLeft.getForwardChar(result);
        result = reflector.getOutput(result);
        result = rotorLeft.getBackwardChar(result);
        result = rotorMiddle.getBackwardChar(result);
        result = rotorRight.getBackwardChar(result);
        raiseEvent('characterEncrypted', {
          result: result
        });
        return result;
      };
      this.advanceRotors = function() {
        rotorRight.advanceForward();
      };
    }

    return RotorDeck;

  })();

  this.RotorDeck = RotorDeck;

}).call(this);
