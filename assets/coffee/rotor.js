// Generated by CoffeeScript 1.6.2
(function() {
  var Rotor;

  Rotor = (function() {
    function Rotor(knownRotor, debug) {
      var currentPosition, events, getOffset, log, raiseEvent, warn;

      currentPosition = knownRotor.rightSide.charAt(0);
      events = {};
      getOffset = function() {
        return knownRotor.rightSide.indexOf(currentPosition);
      };
      raiseEvent = function(event) {
        if (events.hasOwnProperty(event)) {
          events[event].forEach(function(fn) {
            fn.call(void 0);
          });
        }
      };
      log = function(text) {
        if (debug && console.log) {
          console.log(text);
        }
      };
      warn = function(text) {
        if (debug && console.warn) {
          console.warn(text);
        }
      };
      this.getForwardChar = function(char) {
        var index, offset, position, result;

        index = knownRotor.rightSide.indexOf(char.toUpperCase());
        offset = getOffset();
        position = index + offset;
        if (position >= knownRotor.rightSide.length) {
          position = position - knownRotor.rightSide.length;
        }
        result = knownRotor.leftSide.charAt(position);
        return result;
      };
      this.getBackwardChar = function(char) {
        var index, offset, position, result;

        index = knownRotor.leftSide.indexOf(char.toUpperCase());
        offset = getOffset();
        position = index - offset;
        if (position < 0) {
          position = knownRotor.rightSide.length + position;
        }
        result = knownRotor.rightSide.charAt(position);
        return result;
      };
      this.getPosition = function(char) {
        return currentPosition;
      };
      this.setPosition = function(char) {
        if (knownRotor.rightSide.indexOf(char) >= 0) {
          return currentPosition = char;
        }
      };
      this.advanceForward = function() {
        var index, prevPosition;

        index = knownRotor.rightSide.indexOf(currentPosition);
        index++;
        if (index >= knownRotor.rightSide.length) {
          index = 0;
        }
        prevPosition = currentPosition;
        currentPosition = knownRotor.rightSide.charAt(index);
        raiseEvent("advancedForward");
        if (prevPosition === knownRotor.turnover) {
          raiseEvent("turnover");
        }
        if (knownRotor.type === "I") {
          $($('.rotor_letters').find('li.visible_letter')[0]).removeClass('visible_letter');
          $($('.rotor_letters').find('li:contains(' + currentPosition + ')')[0]).addClass('visible_letter');
        }
        if (knownRotor.type === "II") {
          $($('.rotor_letters').find('li.visible_letter')[1]).removeClass('visible_letter');
          $($('.rotor_letters').find('li:contains(' + currentPosition + ')')[1]).addClass('visible_letter');
        }
        if (knownRotor.type === "III") {
          $($('.rotor_letters').find('li.visible_letter')[2]).removeClass('visible_letter');
          $($('.rotor_letters').find('li:contains(' + currentPosition + ')')[2]).addClass('visible_letter');
        }
      };
      this.advanceBackward = function() {
        var index;

        index = knownRotor.rightSide.indexOf(currentPosition);
        index--;
        if (index < 0) {
          index = knownRotor.rightSide.length - 1;
        }
        if (knownRotor.type === "I") {
          $($('.rotor_letters').find('li.visible_letter')[0]).removeClass('visible_letter');
          $($('.rotor_letters').find('li:contains(' + currentPosition + ')')[0]).addClass('visible_letter');
        }
        if (knownRotor.type === "II") {
          $($('.rotor_letters').find('li.visible_letter')[1]).removeClass('visible_letter');
          $($('.rotor_letters').find('li:contains(' + currentPosition + ')')[1]).addClass('visible_letter');
        }
        if (knownRotor.type === "III") {
          $($('.rotor_letters').find('li.visible_letter')[2]).removeClass('visible_letter');
          $($('.rotor_letters').find('li:contains(' + currentPosition + ')')[2]).addClass('visible_letter');
        }
      };
      this.on = function(event, callback) {
        if (typeof callback !== 'function') {
          return;
        }
        if (!events.hasOwnProperty(event)) {
          events[event] = [];
        }
        events[event].push(callback);
      };
    }

    return Rotor;

  })();

  this.Rotor = Rotor;

}).call(this);
