// Generated by CoffeeScript 1.6.2
(function() {
  describe("reflector type A", function() {
    var reflector;

    reflector = new Reflector(KnownReflectors.A);
    it('should return E, if A is passed', function() {
      var result;

      result = reflector.getOutput("A");
      return expect(result).toBe("E");
    });
    it('should return Z, if D is passed', function() {
      var result;

      result = reflector.getOutput("D");
      return expect(result).toBe("Z");
    });
    it('should return D, if Z is passed', function() {
      var result;

      result = reflector.getOutput("Z");
      return expect(result).toBe("D");
    });
    return it('should not return E, if Z is passed', function() {
      var result;

      result = reflector.getOutput("Z");
      return expect(result).not.toBe("E");
    });
  });

  describe("reflector type B", function() {
    var reflector;

    reflector = new Reflector(KnownReflectors.B);
    it('should return Y, if A is passed', function() {
      var result;

      result = reflector.getOutput("A");
      return expect(result).toBe("Y");
    });
    it('should return H, if D is passed', function() {
      var result;

      result = reflector.getOutput("D");
      return expect(result).toBe("H");
    });
    return it('should return T, if Z is passed', function() {
      var result;

      result = reflector.getOutput("Z");
      return expect(result).toBe("T");
    });
  });

  describe("reflector type C", function() {
    var reflector;

    reflector = new Reflector(KnownReflectors.C);
    it('should return P, if C is passed', function() {
      var result;

      result = reflector.getOutput("C");
      return expect(result).toBe("P");
    });
    it('should return I, if E is passed', function() {
      var result;

      result = reflector.getOutput("E");
      return expect(result).toBe("I");
    });
    return it('should return L, if Z is passed', function() {
      var result;

      result = reflector.getOutput("Z");
      return expect(result).toBe("L");
    });
  });

}).call(this);
