// Generated by CoffeeScript 1.6.2
(function() {
  describe("reflector deck. setup - reflector A, rotor right - III, rotor middle - II, rotor left - I, initial position: AAA", function() {
    var reflector, rotorDeck, rotorLeft, rotorMiddle, rotorRight;

    reflector = null;
    rotorRight = null;
    rotorMiddle = null;
    rotorLeft = null;
    rotorDeck = null;
    beforeEach(function() {
      reflector = new Reflector(KnownReflectors.A);
      rotorRight = new Rotor(KnownRotors.III);
      rotorRight.setPosition("A");
      rotorMiddle = new Rotor(KnownRotors.II);
      rotorMiddle.setPosition("A");
      rotorLeft = new Rotor(KnownRotors.I);
      rotorLeft.setPosition("A");
      return rotorDeck = new RotorDeck(reflector, rotorRight, rotorMiddle, rotorLeft);
    });
    it('should return I, if A is passed', function() {
      var result;

      result = rotorDeck.encrypt("A");
      return expect(result).toBe("I");
    });
    it('should return A, if I is passed', function() {
      var result;

      result = rotorDeck.encrypt("I");
      return expect(result).toBe("A");
    });
    it('should return B, if F is passed', function() {
      var result;

      result = rotorDeck.encrypt("F");
      return expect(result).toBe("B");
    });
    return it('should return F, if B is passed', function() {
      var result;

      result = rotorDeck.encrypt("B");
      return expect(result).toBe("F");
    });
  });

  describe("reflector deck. setup - reflector A, rotor right - III, rotor middle - II, rotor left - I, initial position: AAB", function() {
    var reflector, rotorDeck, rotorLeft, rotorMiddle, rotorRight;

    reflector = null;
    rotorRight = null;
    rotorMiddle = null;
    rotorLeft = null;
    rotorDeck = null;
    beforeEach(function() {
      reflector = new Reflector(KnownReflectors.A);
      rotorRight = new Rotor(KnownRotors.III);
      rotorRight.setPosition("B");
      rotorMiddle = new Rotor(KnownRotors.II);
      rotorMiddle.setPosition("A");
      rotorLeft = new Rotor(KnownRotors.I);
      rotorLeft.setPosition("A");
      return rotorDeck = new RotorDeck(reflector, rotorRight, rotorMiddle, rotorLeft);
    });
    it('should return E, if A is passed', function() {
      var result;

      result = rotorDeck.encrypt("A");
      return expect(result).toBe("E");
    });
    return it('should return R, if B is passed', function() {
      var result;

      result = rotorDeck.encrypt("B");
      return expect(result).toBe("R");
    });
  });

}).call(this);
